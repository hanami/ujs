#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

setup() {
  bundle install --retry=10 --jobs=$(_cpu_count) --no-prune
}

qa() {
  rubocop_check
}

specs() {
  run_unit_tests &&
    run_integration_tests
}

rubocop_check() {
  bundle exec rubocop --parallel
}

_cpu_count() {
  if [ -f /proc/cpuinfo ]; then
    echo $(grep -c ^processor /proc/cpuinfo)
  elif [ -z "$(command -v sysctl)" ]; then
    echo $(sysctl -n hw.cpu)
  else
    echo 1
  fi
}

run_unit_tests() {
  bundle exec rake spec:coverage
}

run_integration_tests() {
  local pwd=$PWD
  local root="$pwd/spec/integration"

  for test in $(find $root -name '*_spec.rb')
  do
    run_integration_test $test

    if [ $? -ne 0 ]; then
      local exit_code=$?
      echo "Failing test: $test"
      exit $exit_code
    fi
  done
}

run_integration_test() {
  local test=$1

  printf "\n\n\nRunning: $test\n"
  bundle exec rspec $test
}

run_test() {
  local test=$1

  printf "\n\n\nRunning: $test\n"
  COVERAGE=true bundle exec rspec $test
}

main() {
  local subcommand=$@
  setup

  if [ "$subcommand" = "qa" ]; then
    qa
  else
    specs
  fi
}

main $@
